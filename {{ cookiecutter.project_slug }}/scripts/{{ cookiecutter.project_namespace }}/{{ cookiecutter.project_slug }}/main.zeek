{% set tcp = cookiecutter.L4_protocol == "TCP" -%}
{% set udp = cookiecutter.L4_protocol == "UDP" -%}
##! Implements base functionality for {{ cookiecutter.protocol_name }} analysis.
##! Generates the {{ cookiecutter.protocol_name|title }}.log file.

# Generated by binpac_quickstart

module {{ cookiecutter.protocol_name|title }};

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
		
		# ## TODO: Add other fields here that you'd like to log.
	};

	## Event that can be handled to access the {{ cookiecutter.protocol_name }} record as it is sent on
	## to the loggin framework.
	global log_{{ cookiecutter.protocol_name|lower }}: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by
# uncommenting the following and specifying the port(s):
{% if tcp %}
# const ports = { 1234/tcp, 5678/tcp };
{% elif udp %}
# const ports = { 1234/udp, 5678/udp };
{% endif %}

# redef likely_server_ports += { ports };

event zeek_init() &priority=5
	{
	Log::create_stream({{ cookiecutter.protocol_name|title }}::LOG, [$columns=Info, $ev=log_{{ cookiecutter.protocol_name|lower }}, $path="{{ cookiecutter.protocol_name|lower }}"]);

	# TODO: If you're using port-based DPD, uncomment this.
	# Analyzer::register_for_ports(Analyzer::ANALYZER_{{ cookiecutter.protocol_name|upper }}, ports);
	}

event {{ cookiecutter.protocol_name|lower }}_event(c: connection)
	{
	local info: Info;
	info$ts  = network_time();
	info$uid = c$uid;
	info$id  = c$id;

	Log::write({{ cookiecutter.protocol_name|title }}::LOG, info);
	}
