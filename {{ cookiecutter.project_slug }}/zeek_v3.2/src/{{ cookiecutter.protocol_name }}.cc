{% set tcp = cookiecutter.L4_protocol == "TCP" -%}
{% set udp = cookiecutter.L4_protocol == "UDP" -%}
// Generated by binpac_quickstart

#include "{{ cookiecutter.protocol_name }}.h"
{% if tcp %}
#include "analyzer/protocol/tcp/TCP_Reassembler.h"
{% endif %}
#include "Reporter.h"

#include "events.bif.h"

using namespace analyzer::{{ cookiecutter.project_namespace }}_{{ cookiecutter.protocol_name }};

{{ cookiecutter.protocol_name }}_Analyzer::{{ cookiecutter.protocol_name }}_Analyzer(Connection* c)
{% if tcp %}
: tcp::TCP_ApplicationAnalyzer("{{ cookiecutter.protocol_name }}", c)
{% elif udp %}
: analyzer::Analyzer("{{ cookiecutter.protocol_name }}", c)
{% endif %}
	{
	interp = new binpac::{{ cookiecutter.protocol_name }}::{{ cookiecutter.protocol_name }}_Conn(this);
	{% if tcp %}
	had_gap = false;
	{% endif %}
	}

{{ cookiecutter.protocol_name }}_Analyzer::~{{ cookiecutter.protocol_name }}_Analyzer()
	{
	delete interp;
	}

void {{ cookiecutter.protocol_name }}_Analyzer::Done()
	{
	{% if tcp %}
	tcp::TCP_ApplicationAnalyzer::Done();

	interp->FlowEOF(true);
	interp->FlowEOF(false);
	{% elif udp %}
	Analyzer::Done();
	{% endif %}
	}
{% if tcp %}
void {{ cookiecutter.protocol_name }}_Analyzer::EndpointEOF(bool is_orig)
	{
	tcp::TCP_ApplicationAnalyzer::EndpointEOF(is_orig);
	interp->FlowEOF(is_orig);
	}

void {{ cookiecutter.protocol_name }}_Analyzer::DeliverStream(int len, const u_char* data, bool orig)
	{
	tcp::TCP_ApplicationAnalyzer::DeliverStream(len, data, orig);

	assert(TCP());
	if ( TCP()->IsPartial() )
		return;

	if ( had_gap )
		// If only one side had a content gap, we could still try to
		// deliver data to the other side if the script layer can handle this.
		return;

	try
		{
		interp->NewData(orig, data, data + len);
		}
	catch ( const binpac::Exception& e )
		{
		ProtocolViolation(fmt("Binpac exception: %s", e.c_msg()));
		}
	}

void {{ cookiecutter.protocol_name }}_Analyzer::Undelivered(uint64_t seq, int len, bool orig)
	{
	tcp::TCP_ApplicationAnalyzer::Undelivered(seq, len, orig);
	had_gap = true;
	interp->NewGap(orig, len);
	}
{% elif udp %}
void {{ cookiecutter.protocol_name }}_Analyzer::DeliverPacket(int len, const u_char* data,
	 			  bool orig, uint64_t seq, const IP_Hdr* ip, int caplen)
	{
	Analyzer::DeliverPacket(len, data, orig, seq, ip, caplen);

	try
		{
		interp->NewData(orig, data, data + len);
		}
	catch ( const binpac::Exception& e )
		{
		ProtocolViolation(fmt("Binpac exception: %s", e.c_msg()));
		}
	}
{% endif %}
