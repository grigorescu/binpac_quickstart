#!/usr/bin/env python3

# Adds up execution counts in .tmp/script-coverage/XXXXXX

import glob
from pathlib import Path, PurePath

# We are pkg/tests/Scripts/coverage-to-gcov
# .parent is pkg/tests/Scripts
# .parent.parent is pkg/tests
# .parent.parent.parent is pkg
test_dir = Path(__file__).resolve().parent.parent

def find_files():
    profiler_glob = str(PurePath.joinpath(test_dir, ".tmp", "script-coverage", "btest_profile-*"))
    return glob.glob(profiler_glob)


def is_package_file(path):
    file_path = Path(path).resolve()

    # We skip files from the btests themselves
    if '.tmp' in str(file_path) or 'tests/Scripts' in str(file_path):
        return False

    return str(file_path.parent).startswith(str(test_dir.parent))


def parse_line(line):
    count, location, source = line.split('\t', 2)

    loc_file, loc_line = location.split(', ', 1)

    if 'lines ' in loc_line:
        start, end = loc_line.split('lines ', 1)[1].split('-')
        lines = range(int(start), int(end) + 1)
    else:
        lines = [int(loc_line.split('line ', 1)[1])]

    return (int(count.strip()), loc_file, lines)


def main():
    line_counts = {}

    for f in find_files():
        with open(f, 'r') as profile_file:
            for l in profile_file.readlines():
                try:
                    count, loc_file, lines = parse_line(l)
                except ValueError:
                    continue

                if not is_package_file(loc_file):
                    continue

                if loc_file not in line_counts:
                    line_counts[loc_file] = {}
                for line in lines:
                    if line not in line_counts[loc_file]:
                        line_counts[loc_file][line] = 0
                    line_counts[loc_file][line] += count


    with open(PurePath.joinpath(test_dir, ".tmp", "script-coverage", "coverage.stats"), 'w') as f:
        for filename, counts in line_counts.items():
            for line, count in counts.items():
                f.write(f"{count}\t{line}\t{filename}\n")

if __name__ == "__main__":
    main()
